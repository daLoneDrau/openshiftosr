package com.osrapi.models.thefantasytrip;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "talent_prerequisite", schema = "the_fantasy_trip")
public final class TalentPrerequisiteEntity {
	/** the required attribute. */
	@OneToOne(cascade = CascadeType.ALL, targetEntity = AttributeEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "attribute_id", referencedColumnName = "attribute_id")
	private AttributeEntity					attribute;
	/** the minimum value for the required attribute. */
	@Column(name = "attribute_min")
	@JsonProperty("attribute_min")
	private Long							attributeMin;
	/**
	 * the primary key - an autogenerated id (unique for each user in the db).
	 */
	@Id
	@Column(name = "talent_prerequisite_id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long							id;
	/** the name. */
	@NotNull
	private String							name;
	/** the flag indicating the prerequisite is required. */
	@NotNull
	private boolean							required;
	/** the required spell. */
	@OneToOne(cascade = CascadeType.ALL, targetEntity = SpellEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "spell_id", referencedColumnName = "spell_id")
	private SpellEntity						spell;
	/** the required talent. */
	@OneToOne(cascade = CascadeType.ALL, targetEntity = TalentEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "talent_id", referencedColumnName = "talent_id")
	private TalentEntity					talent;
	/** the prerequisite type. */
	@OneToOne(cascade = CascadeType.ALL,
			targetEntity = TalentPrerequisiteTypeEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "talent_prerequisite_type_id",
	referencedColumnName = "talent_prerequisite_type_id")
	@NotNull
	private TalentPrerequisiteTypeEntity	type;
	// Public methods
	/** Creates a new instance of {@link TalentPrerequisiteEntity}. */
	public TalentPrerequisiteEntity() {
		super();
	}
	/**
	 * Gets the required attribute.
	 * @return {@link AttributeEntity}
	 */
	public AttributeEntity getAttribute() {
		return attribute;
	}
	/**
	 * Gets the minimum value for the required attribute.
	 * @return {@link Long}
	 */
	public Long getAttributeMin() {
		return attributeMin;
	}
	/**
	 * Gets the id.
	 * @return {@link long}
	 */
	public long getId() {
		return id;
	}
	/**
	 * Gets the name.
	 * @return {@link String}
	 */
	public String getName() {
		return name;
	}
	/**
	 * Gets the flag indicating whether the prerequisite is required.
	 * @return {@link boolean}
	 */
	public boolean getRequired() {
		return required;
	}
	/**
	 * Gets the required spell.
	 * @return {@link SpellEntity}
	 */
	public SpellEntity getSpell() {
		return spell;
	}
	/**
	 * Gets the required talent.
	 * @return {@link TalentEntity}
	 */
	public TalentEntity getTalent() {
		return talent;
	}
	/**
	 * Gets the prerequisite type.
	 * @return {@link TalentPrerequisiteTypeEntity}
	 */
	public TalentPrerequisiteTypeEntity getType() {
		return type;
	}
	/**
	 * Sets the required attribute.
	 * @param val the value to set
	 */
	public void setAttribute(final AttributeEntity val) {
		attribute = val;
	}
	/**
	 * Sets the minimum value for the required attribute.
	 * @param val the value to set
	 */
	public void setAttributeMin(final Long val) {
		attributeMin = val;
	}
	/**
	 * Sets the id.
	 * @param val the new value
	 */
	public void setId(final long val) {
		id = val;
	}
	/**
	 * Sets the name.
	 * @param val the value to set
	 */
	public void setName(final String val) {
		name = val;
	}
	/**
	 * Sets the flag indicating whether the prerequisite is required.
	 * @param val the value to set
	 */
	public void setRequired(final boolean val) {
		required = val;
	}
	/**
	 * Sets the required spell.
	 * @param val the value to set
	 */
	public void setSpell(final SpellEntity val) {
		spell = val;
	}
	/**
	 * Sets the required talent.
	 * @param val the value to set
	 */
	public void setTalent(final TalentEntity val) {
		talent = val;
	}
	/**
	 * Sets the prerequisite type.
	 * @param val the value to set
	 */
	public void setType(final TalentPrerequisiteTypeEntity val) {
		type = val;
	}
}

package com.osrapi.models.thefantasytrip;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "profession_archetype", schema = "the_fantasy_trip")
public final class ArchetypeEntity {
	/** the description. */
	@NotNull
	private String				description;
	/** the full name. */
	@NotNull
	@Column(name = "full_name")
	@JsonProperty("full_name")
	private String				fullName;
	/**
	 * the primary key - an autogenerated id (unique for each user in the db).
	 */
	@Id
	@Column(name = "profession_archetype_id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long				id;
	/** the minimum dexterity. */
	@Column(name = "minimum_dx")
	@JsonProperty("minimum_dx")
	private Long				minDx;
	/** the minimum IQ. */
	@Column(name = "minimum_iq")
	@JsonProperty("minimum_iq")
	private Long				minIq;
	/** the minimum strength. */
	@Column(name = "minimum_st")
	@JsonProperty("minimum_st")
	private Long				minSt;
	/** the short name. */
	@NotNull
	@Column(name = "short_name")
	@JsonProperty("short_name")
	private String				shortName;
	/** the archetype's base spells. */
	@OneToMany(targetEntity = SpellEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "archetype_base_spell", schema = "the_fantasy_trip",
	joinColumns = @JoinColumn(name = "profession_archetype_id",
	referencedColumnName = "profession_archetype_id"),
	inverseJoinColumns = @JoinColumn(name = "spell_id",
	referencedColumnName = "spell_id"))
	@JsonProperty("base_spells")
	private List<SpellEntity>	spells;
	/** the archetype's base talents. */
	@OneToMany(targetEntity = TalentEntity.class,
			fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "archetype_base_talent", schema = "the_fantasy_trip",
	joinColumns = @JoinColumn(name = "profession_archetype_id",
	referencedColumnName = "profession_archetype_id"),
	inverseJoinColumns = @JoinColumn(name = "talent_id",
	referencedColumnName = "talent_id"))
	@JsonProperty("base_talents")
	private List<TalentEntity>	talents;
	/** the archetype's character type. */
	@OneToOne(cascade = CascadeType.ALL,
			targetEntity = CharacterTypeEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "character_type_id",
	referencedColumnName = "character_type_id")
	private CharacterTypeEntity	type;
	// Public methods
	/** Creates a new instance of {@link ArchetypeEntity}. */
	public ArchetypeEntity() {
		super();
	}
	/**
	 * Gets the description.
	 * @return {@link String}
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * Gets the name.
	 * @return {@link String}
	 */
	public String getFullName() {
		return fullName;
	}
	/**
	 * Gets the id.
	 * @return {@link long}
	 */
	public long getId() {
		return id;
	}
	/**
	 * Gets the minimum dexterity.
	 * @return {@link Long}
	 */
	public Long getMinDx() {
		return minDx;
	}
	/**
	 * Gets the minimum IQ.
	 * @return {@link Long}
	 */
	public Long getMinIq() {
		return minIq;
	}
	/**
	 * Gets the minimum strength.
	 * @return {@link Long}
	 */
	public Long getMinSt() {
		return minSt;
	}
	/**
	 * Gets the name.
	 * @return {@link String}
	 */
	public String getShortName() {
		return shortName;
	}
	/**
	 * Get the list of base spells.
	 * @return {@link List}<{@link SpellEntity}>
	 */
	public List<SpellEntity> getSpells() {
		return spells;
	}
	/**
	 * Get the list of base talents.
	 * @return {@link List}<{@link TalentEntity}>
	 */
	public List<TalentEntity> getTalents() {
		return talents;
	}
	/**
	 * Gets the type.
	 * @return {@link CharacterTypeEntity}
	 */
	public CharacterTypeEntity getType() {
		return type;
	}
	/**
	 * Sets the description.
	 * @param val the new value
	 */
	public void setDescription(final String val) {
		description = val;
	}
	/**
	 * Sets the full name.
	 * @param val the new value
	 */
	public void setFullName(final String val) {
		fullName = val;
	}
	/**
	 * Sets the id.
	 * @param val the new value
	 */
	public void setId(final long val) {
		id = val;
	}
	/**
	 * Sets the minimum dexterity.
	 * @param val the value to set
	 */
	public void setMinDx(final long val) {
		minDx = val;
	}
	/**
	 * Sets the minimum IQ.
	 * @param val the value to set
	 */
	public void setMinIq(final long val) {
		minIq = val;
	}
	/**
	 * Sets the minimum strength.
	 * @param val the value to set
	 */
	public void setMinSt(final long val) {
		minSt = val;
	}
	/**
	 * Sets the short name.
	 * @param val the new value
	 */
	public void setShortName(final String val) {
		shortName = val;
	}
	/**
	 * Sets the list of spells.
	 * @param val the spells to set
	 */
	public void setSpells(final List<SpellEntity> val) {
		spells = val;
	}
	/**
	 * Sets the list of talents.
	 * @param val the talents to set
	 */
	public void setTalents(final List<TalentEntity> val) {
		talents = val;
	}
	/**
	 * Sets the type.
	 * @param val the new value
	 */
	public void setType(final CharacterTypeEntity val) {
		type = val;
	}
}
